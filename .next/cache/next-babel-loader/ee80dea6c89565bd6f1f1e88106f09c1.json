{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/victoriatholerus/Documents/cool-prdject/react-storyblok-next-boilerplate/pages/[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\nimport HmImage from \"../components/modules/HmImage\";\nimport SecondHeadline from \"../components/modules/HeadlineModule/SecondHeadline\";\nimport ThirdHeadline from \"../components/modules/HeadlineModule/ThirdHeadline\";\nimport Sniph from \"../components/modules/Sniph\";\nimport BrickGame from \"../components/modules/BrickGame\";\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nvar SlugPage = function SlugPage(_ref) {\n  var data = _ref.data;\n  var content = data.content;\n  var imageModuleData = content.components.find(function (item) {\n    return item.component === \"Image Module\";\n  });\n  var hackathonData = content.components.find(function (item) {\n    return item.component === \"Hackathon\";\n  });\n  var gameData = content.components.find(function (item) {\n    return item.component === \"Brick Game\";\n  });\n  var sniphData = content.components.find(function (item) {\n    return item.component === \"Sniph\";\n  });\n  var headlineModuleData = content.components.find(function (item) {\n    return item.component === \"Headline Module\";\n  });\n  var secondheadlineData = content.components.find(function (item) {\n    return item.component === \"Second Headline\";\n  });\n  var thirdheadlineData = content.components.find(function (item) {\n    return item.component === \"Third Headline\";\n  });\n  var paragraphModuleData = content.components.find(function (item) {\n    return item.component === \"Paragraph Module\";\n  });\n  var hmimageData = content.components.find(function (item) {\n    return item.component === \"HM Image\";\n  });\n  console.log(hackathonData);\n  console.log(\"\\uD83C\\uDF08 I am getting this content from Storybok\");\n  console.log(content);\n\n  var codeString = _JSON$stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }) : null, secondheadlineData ? __jsx(SecondHeadline, {\n    title: secondheadlineData.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }) : null, thirdheadlineData ? __jsx(ThirdHeadline, {\n    title: thirdheadlineData.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }) : null, paragraphModuleData ? __jsx(ParagraphModule, {\n    copy: paragraphModuleData.copy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }) : null, imageModuleData ? __jsx(ImageModule, {\n    image: imageModuleData.ImageModule,\n    copy: imageModuleData.Copy,\n    link: imageModuleData.Link.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }) : null, hackathonData ? __jsx(Hackathon, {\n    imggif: hackathonData.gif,\n    imggiff: hackathonData.giff,\n    imggifff: hackathonData.gifff,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }) : null, gameData ? __jsx(BrickGame, {\n    brickimage: gameData.BrickImage,\n    copy: gameData.copy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }) : null, sniphData ? __jsx(Sniph, {\n    headlinesniph: sniphData.HeadlineSniph,\n    image1: sniphData.image1,\n    image2: sniphData.image2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }) : null, hmimageData ? __jsx(HmImage, {\n    images: hmimageData.images,\n    image: hmimageData.images2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }) : null);\n};\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nSlugPage.getInitialProps = function _callee(_ref2) {\n  var query, page, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query;\n\n          /* {query} is an object we receive within this method from Next,\n          so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n          page = query.page;\n          /* Calling our internal api endpoint so that we can fetch Storyblok content\n          server-side (we are on client-side here) */\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetchUrl(\"http://localhost:3000/api/page/\".concat(page)));\n\n        case 4:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default SlugPage;","map":{"version":3,"sources":["/Users/victoriatholerus/Documents/cool-prdject/react-storyblok-next-boilerplate/pages/[page].js"],"names":["fetch","DefaultLayout","HeadlineModule","ParagraphModule","ImageModule","HmImage","SecondHeadline","ThirdHeadline","Sniph","BrickGame","fetchUrl","url","then","r","json","SlugPage","data","content","imageModuleData","components","find","item","component","hackathonData","gameData","sniphData","headlineModuleData","secondheadlineData","thirdheadlineData","paragraphModuleData","hmimageData","console","log","codeString","title","copy","Copy","Link","gif","giff","gifff","BrickImage","HeadlineSniph","image1","image2","images","images2","getInitialProps","query","page"],"mappings":"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","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\"\n\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\"\n\n/* components */\nimport HeadlineModule from \"../components/modules/HeadlineModule\"\nimport ParagraphModule from \"../components/modules/ParagraphModule\"\nimport ImageModule from \"../components/modules/ImageModule\"\nimport HmImage from \"../components/modules/HmImage\"\nimport SecondHeadline from \"../components/modules/HeadlineModule/SecondHeadline\"\nimport ThirdHeadline from \"../components/modules/HeadlineModule/ThirdHeadline\"\nimport Sniph from \"../components/modules/Sniph\"\nimport BrickGame from \"../components/modules/BrickGame\"\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json())\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst SlugPage = ({data}) => {\n  const {content} = data\n\n  const imageModuleData = content.components.find(\n    item => item.component === \"Image Module\"\n  )\n  const hackathonData = content.components.find(\n    item => item.component === \"Hackathon\"\n  )\n  const gameData = content.components.find(\n    item => item.component === \"Brick Game\"\n  )\n\n  const sniphData = content.components.find(item => item.component === \"Sniph\")\n\n  const headlineModuleData = content.components.find(\n    item => item.component === \"Headline Module\"\n  )\n  const secondheadlineData = content.components.find(\n    item => item.component === \"Second Headline\"\n  )\n  const thirdheadlineData = content.components.find(\n    item => item.component === \"Third Headline\"\n  )\n\n  const paragraphModuleData = content.components.find(\n    item => item.component === \"Paragraph Module\"\n  )\n\n  const hmimageData = content.components.find(\n    item => item.component === \"HM Image\"\n  )\n\n  console.log(hackathonData)\n  console.log(`ðŸŒˆ I am getting this content from Storybok`)\n  console.log(content)\n  const codeString = JSON.stringify(content)\n  /* Now you need to map your own components, I just left the headline module as reference */\n  return (\n    <div>\n      {/* <DefaultLayout> */}\n      {headlineModuleData ? (\n        <HeadlineModule title={headlineModuleData.title} />\n      ) : null}\n\n      {secondheadlineData ? (\n        <SecondHeadline title={secondheadlineData.title} />\n      ) : null}\n      {thirdheadlineData ? (\n        <ThirdHeadline title={thirdheadlineData.title} />\n      ) : null}\n\n      {paragraphModuleData ? (\n        <ParagraphModule copy={paragraphModuleData.copy} />\n      ) : null}\n\n      {imageModuleData ? (\n        <ImageModule\n          image={imageModuleData.ImageModule}\n          copy={imageModuleData.Copy}\n          link={imageModuleData.Link.url}\n        />\n      ) : null}\n\n      {hackathonData ? (\n        <Hackathon\n          imggif={hackathonData.gif}\n          imggiff={hackathonData.giff}\n          imggifff={hackathonData.gifff}\n        />\n      ) : null}\n\n      {gameData ? (\n        <BrickGame brickimage={gameData.BrickImage} copy={gameData.copy} />\n      ) : null}\n\n      {sniphData ? (\n        <Sniph\n          headlinesniph={sniphData.HeadlineSniph}\n          image1={sniphData.image1}\n          image2={sniphData.image2}\n        />\n      ) : null}\n\n      {hmimageData ? (\n        <HmImage images={hmimageData.images} image={hmimageData.images2} />\n      ) : null}\n      {/* </DefaultLayout> */}\n    </div>\n  )\n}\n\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\nSlugPage.getInitialProps = async ({query}) => {\n  /* {query} is an object we receive within this method from Next,\n\tso that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const {page} = query\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n\tserver-side (we are on client-side here) */\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`)\n  /* Returning the data back into SlugPage as props */\n  return {data} /* This is the same as { data: data } */\n}\n\nexport default SlugPage\n"]},"metadata":{},"sourceType":"module"}