{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/victoriatholerus/Documents/cool-prdject/react-storyblok-next-boilerplate/pages/[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\nimport HmImage from \"../components/modules/HmImage\";\nimport SecondHeadline from \"../components/modules/HeadlineModule/SecondHeadline\";\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nvar SlugPage = function SlugPage(_ref) {\n  var data = _ref.data;\n  var content = data.content;\n  var imageModuleData = content.components.find(function (item) {\n    return item.component === \"Image Module\";\n  });\n  var headlineModuleData = content.components.find(function (item) {\n    return item.component === \"Headline Module\";\n  });\n  var secondheadlineData = content.components.find(function (item) {\n    return item.component === \"Second Headline\";\n  });\n  var paragraphModuleData = content.components.find(function (item) {\n    return item.component === \"Paragraph Module\";\n  });\n  var hmimageData = content.components.find(function (item) {\n    return item.component === \"HM Image\";\n  });\n  console.log(secondheadlineData);\n  console.log(\"\\uD83C\\uDF08 I am getting this content from Storybok\");\n  console.log(content);\n\n  var codeString = _JSON$stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }) : null, secondheadlineData ? __jsx(SecondHeadline, {\n    copy: secondheadlineData.Copy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }) : null, paragraphModuleData ? __jsx(ParagraphModule, {\n    copy: paragraphModuleData.copy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }) : null, hmimageData ? __jsx(HmImage, {\n    images: hmimageData.images,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }) : null, imageModuleData ? __jsx(ImageModule, {\n    image: imageModuleData.ImageModule,\n    copy: imageModuleData.Copy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }) : null));\n};\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nSlugPage.getInitialProps = function _callee(_ref2) {\n  var query, page, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query;\n\n          /* {query} is an object we receive within this method from Next,\n          so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n          page = query.page;\n          /* Calling our internal api endpoint so that we can fetch Storyblok content\n          server-side (we are on client-side here) */\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetchUrl(\"http://localhost:3000/api/page/\".concat(page)));\n\n        case 4:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default SlugPage;","map":{"version":3,"sources":["/Users/victoriatholerus/Documents/cool-prdject/react-storyblok-next-boilerplate/pages/[page].js"],"names":["fetch","DefaultLayout","HeadlineModule","ParagraphModule","ImageModule","HmImage","SecondHeadline","fetchUrl","url","then","r","json","SlugPage","data","content","imageModuleData","components","find","item","component","headlineModuleData","secondheadlineData","paragraphModuleData","hmimageData","console","log","codeString","title","Copy","copy","images","getInitialProps","query","page"],"mappings":"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","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\"\n\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\"\n\n/* components */\nimport HeadlineModule from \"../components/modules/HeadlineModule\"\nimport ParagraphModule from \"../components/modules/ParagraphModule\"\nimport ImageModule from \"../components/modules/ImageModule\"\nimport HmImage from \"../components/modules/HmImage\"\nimport SecondHeadline from \"../components/modules/HeadlineModule/SecondHeadline\"\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json())\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst SlugPage = ({data}) => {\n  const {content} = data\n\n  const imageModuleData = content.components.find(\n    item => item.component === \"Image Module\"\n  )\n  const headlineModuleData = content.components.find(\n    item => item.component === \"Headline Module\"\n  )\n  const secondheadlineData = content.components.find(\n    item => item.component === \"Second Headline\"\n  )\n\n  const paragraphModuleData = content.components.find(\n    item => item.component === \"Paragraph Module\"\n  )\n  const hmimageData = content.components.find(\n    item => item.component === \"HM Image\"\n  )\n  console.log(secondheadlineData)\n\n  console.log(`ðŸŒˆ I am getting this content from Storybok`)\n  console.log(content)\n  const codeString = JSON.stringify(content)\n  /* Now you need to map your own components, I just left the headline module as reference */\n  return (\n    <div>\n      <DefaultLayout>\n        {headlineModuleData ? (\n          <HeadlineModule title={headlineModuleData.title} />\n        ) : null}\n\n        {secondheadlineData ? (\n          <SecondHeadline copy={secondheadlineData.Copy} />\n        ) : null}\n\n        {paragraphModuleData ? (\n          <ParagraphModule copy={paragraphModuleData.copy} />\n        ) : null}\n        {hmimageData ? <HmImage images={hmimageData.images} /> : null}\n\n        {imageModuleData ? (\n          <ImageModule\n            image={imageModuleData.ImageModule}\n            copy={imageModuleData.Copy}\n          />\n        ) : null}\n      </DefaultLayout>\n    </div>\n  )\n}\n\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\nSlugPage.getInitialProps = async ({query}) => {\n  /* {query} is an object we receive within this method from Next,\n\tso that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const {page} = query\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n\tserver-side (we are on client-side here) */\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`)\n  /* Returning the data back into SlugPage as props */\n  return {data} /* This is the same as { data: data } */\n}\n\nexport default SlugPage\n"]},"metadata":{},"sourceType":"module"}