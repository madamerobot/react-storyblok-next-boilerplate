{"ast":null,"code":"var _jsxFileName = \"/Users/victoriatholerus/Documents/cool-prdject/react-storyblok-next-boilerplate/pages/[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\nimport HmImage from \"../components/modules/HmImage\";\nimport SecondHeadline from \"../components/modules/HeadlineModule/SecondHeadline\";\nimport ThirdHeadline from \"../components/modules/HeadlineModule/ThirdHeadline\";\nimport HmImage2 from \"../components/modules/HmImage/HmImage2\";\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nconst SlugPage = ({\n  data\n}) => {\n  const {\n    content\n  } = data;\n  const imageModuleData = content.components.find(item => item.component === \"Image Module\");\n  const headlineModuleData = content.components.find(item => item.component === \"Headline Module\");\n  const secondheadlineData = content.components.find(item => item.component === \"Second Headline\");\n  const thirdheadlineData = content.components.find(item => item.component === \"Third Headline\");\n  const paragraphModuleData = content.components.find(item => item.component === \"Paragraph Module\");\n  const hackathonData = content.components.find(item => item.component === \"Hackathon CI\");\n  const hmimageData = content.components.find(item => item.component === \"HM Image\");\n  const hmimage2Data = content.components.find(item => item.component === \"Hm image2\");\n  console.log(hackathonData);\n  console.log(`ðŸŒˆ I am getting this content from Storybok`);\n  console.log(content);\n  const codeString = JSON.stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }) : null, secondheadlineData ? __jsx(SecondHeadline, {\n    title: secondheadlineData.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }) : null, thirdheadlineData ? __jsx(ThirdHeadline, {\n    title: thirdheadlineData.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }) : null, paragraphModuleData ? __jsx(ParagraphModule, {\n    copy: paragraphModuleData.copy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }) : null, imageModuleData ? __jsx(ImageModule, {\n    image: imageModuleData.ImageModule,\n    copy: imageModuleData.Copy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }) : null, hmimageData ? __jsx(HmImage, {\n    images: hmimageData.images,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }) : null, hmimage2Data ? __jsx(HmImage2, {\n    Image: hmimage2Data.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }) : null);\n};\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nSlugPage.getInitialProps = async ({\n  query\n}) => {\n  /* {query} is an object we receive within this method from Next,\n  so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const {\n    page\n  } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n  server-side (we are on client-side here) */\n\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  /* Returning the data back into SlugPage as props */\n\n  return {\n    data\n  };\n  /* This is the same as { data: data } */\n};\n\nexport default SlugPage;","map":{"version":3,"sources":["/Users/victoriatholerus/Documents/cool-prdject/react-storyblok-next-boilerplate/pages/[page].js"],"names":["fetch","DefaultLayout","HeadlineModule","ParagraphModule","ImageModule","HmImage","SecondHeadline","ThirdHeadline","HmImage2","fetchUrl","url","then","r","json","SlugPage","data","content","imageModuleData","components","find","item","component","headlineModuleData","secondheadlineData","thirdheadlineData","paragraphModuleData","hackathonData","hmimageData","hmimage2Data","console","log","codeString","JSON","stringify","title","copy","Copy","images","image","getInitialProps","query","page"],"mappings":"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","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\"\n\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\"\n\n/* components */\nimport HeadlineModule from \"../components/modules/HeadlineModule\"\nimport ParagraphModule from \"../components/modules/ParagraphModule\"\nimport ImageModule from \"../components/modules/ImageModule\"\nimport HmImage from \"../components/modules/HmImage\"\nimport SecondHeadline from \"../components/modules/HeadlineModule/SecondHeadline\"\nimport ThirdHeadline from \"../components/modules/HeadlineModule/ThirdHeadline\"\nimport HmImage2 from \"../components/modules/HmImage/HmImage2\"\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json())\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst SlugPage = ({data}) => {\n  const {content} = data\n\n  const imageModuleData = content.components.find(\n    item => item.component === \"Image Module\"\n  )\n  const headlineModuleData = content.components.find(\n    item => item.component === \"Headline Module\"\n  )\n  const secondheadlineData = content.components.find(\n    item => item.component === \"Second Headline\"\n  )\n  const thirdheadlineData = content.components.find(\n    item => item.component === \"Third Headline\"\n  )\n\n  const paragraphModuleData = content.components.find(\n    item => item.component === \"Paragraph Module\"\n  )\n\n  const hackathonData = content.components.find(\n    item => item.component === \"Hackathon CI\"\n  )\n\n  const hmimageData = content.components.find(\n    item => item.component === \"HM Image\"\n  )\n\n  const hmimage2Data = content.components.find(\n    item => item.component === \"Hm image2\"\n  )\n\n  console.log(hackathonData)\n\n  console.log(`ðŸŒˆ I am getting this content from Storybok`)\n  console.log(content)\n  const codeString = JSON.stringify(content)\n  /* Now you need to map your own components, I just left the headline module as reference */\n  return (\n    <div>\n      {/* <DefaultLayout> */}\n      {headlineModuleData ? (\n        <HeadlineModule title={headlineModuleData.title} />\n      ) : null}\n\n      {secondheadlineData ? (\n        <SecondHeadline title={secondheadlineData.title} />\n      ) : null}\n      {thirdheadlineData ? (\n        <ThirdHeadline title={thirdheadlineData.title} />\n      ) : null}\n\n      {paragraphModuleData ? (\n        <ParagraphModule copy={paragraphModuleData.copy} />\n      ) : null}\n\n      {imageModuleData ? (\n        <ImageModule\n          image={imageModuleData.ImageModule}\n          copy={imageModuleData.Copy}\n        />\n      ) : null}\n      {hmimageData ? <HmImage images={hmimageData.images} /> : null}\n      {hmimage2Data ? <HmImage2 Image={hmimage2Data.image} /> : null}\n\n      {/* </DefaultLayout> */}\n    </div>\n  )\n}\n\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\nSlugPage.getInitialProps = async ({query}) => {\n  /* {query} is an object we receive within this method from Next,\n\tso that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const {page} = query\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n\tserver-side (we are on client-side here) */\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`)\n  /* Returning the data back into SlugPage as props */\n  return {data} /* This is the same as { data: data } */\n}\n\nexport default SlugPage\n"]},"metadata":{},"sourceType":"module"}